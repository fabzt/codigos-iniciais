{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNpsI1GoZkVhPc/EGPV0uSl",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/fabzt/codigos-iniciais/blob/main/for%2C%20whille%2C%20def%2C%20pass%2C%20continue%2C%20return\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# for, break, continue"
      ],
      "metadata": {
        "id": "Q9F5nJ7t80VG"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sKcD2jLE2mr2",
        "outputId": "810ec0f8-8c4f-445d-d07d-6392bc17c06e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Processando o número: 3\n",
            "Número par encontrado: 6. Pulando para o próximo.\n",
            "Processando o número: 9\n",
            "Número par encontrado: 12. Pulando para o próximo.\n",
            "Processando o número: 15\n",
            "Número negativo encontrado: -1. Parando o processo.\n"
          ]
        }
      ],
      "source": [
        "numeros = [3, 6, 9, 12, 15, -1, 18]\n",
        "\n",
        "for numero in numeros:\n",
        "  if numero <0:\n",
        "    print(f\"Número negativo encontrado: {numero}. Parando o processo.\")\n",
        "    break\n",
        "  if numero % 2 == 0:\n",
        "    print(f\"Número par encontrado: {numero}. Pulando para o próximo.\")\n",
        "    continue\n",
        "  print(f\"Processando o número: {numero}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# while, pass, break"
      ],
      "metadata": {
        "id": "OdwM3io__Xwr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "while True:\n",
        "  print(\"Menu: \")\n",
        "  print(\"1. Opção A\")\n",
        "  print(\"2. Opção B\")\n",
        "  print(\"3. Sair\")\n",
        "  escolha = input(\"Escolha uma opção: \")\n",
        "\n",
        "  if escolha == \"1\":\n",
        "    pass\n",
        "  elif escolha == \"2\":\n",
        "    pass\n",
        "  elif escolha == \"3\":\n",
        "    break\n",
        "else:\n",
        "    print(\"Opção inválida. Tente novamente.\")"
      ],
      "metadata": {
        "id": "d97gA-aG3iYE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# def, return, while"
      ],
      "metadata": {
        "id": "B4vMMrEBCJzq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def mostrar_menu():\n",
        "  print(\"Menu:\")\n",
        "  print(\"1. Opção A\")\n",
        "  print(\"2. Opção B\")\n",
        "  print(\"3. Sair\")\n",
        "def processar_escolha (escolha):\n",
        "  if escolha == \"1\":\n",
        "    return True\n",
        "  elif escolha == \"2\":\n",
        "    return True\n",
        "  elif escolha == \"3\":\n",
        "    return False\n",
        "  else:\n",
        "    print(\"Opção inválida. Tente novamente.\")\n",
        "    return True\n",
        "def executar_menu():\n",
        "  continuar = True\n",
        "  while continuar:\n",
        "    mostrar_menu()\n",
        "    escolha = input(\"Escolha uma opção: \")\n",
        "    continuar processar_escolha (escolha)\n",
        "    executar_menu()"
      ],
      "metadata": {
        "id": "rYUxQRR_A-jc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "2U02GfJDCq60"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}